@page
@model Rentify.RazorWebApp.Pages.PostPages.IndexModel

@{
    ViewData["Title"] = "Bài viết";
}

<div class="container">
    <div class="row justify-content-center">
        <!-- Nội dung chính -->
        <div class="col-md-8">
            <div class="main-content p-3">
                <!-- Header tạo bài viết -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <img src="https://via.placeholder.com/40" alt="Avatar" class="rounded-circle me-3" width="40" height="40">
                            <div class="flex-grow-1">
                                <button class="btn btn-light w-100 text-start text-muted" onclick="openCreateModal()">
                                    Bạn đang nghĩ gì?
                                </button>
                            </div>
                        </div>
                        <hr>
                        <div class="row text-center">
                            <div class="col-4">
                                <button class="btn btn-link text-decoration-none text-muted" onclick="openCreateModal()">
                                    <i class="bi bi-camera-video me-2"></i>
                                    Video trực tiếp
                                </button>
                            </div>
                            <div class="col-4">
                                <button class="btn btn-link text-decoration-none text-muted" onclick="openCreateModal()">
                                    <i class="bi bi-images me-2"></i>
                                    Ảnh/Video
                                </button>
                            </div>
                            <div class="col-4">
                                <button class="btn btn-link text-decoration-none text-muted" onclick="openCreateModal()">
                                    <i class="bi bi-emoji-smile me-2"></i>
                                    Cảm xúc
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Danh sách bài viết -->
                <div id="post-container">
                    @foreach (var item in Model.Posts)
                    {
                        @Html.Partial("_PostCard", item)
                    }
                </div>

                <!-- Loading indicator -->
                <div id="loading" class="text-center my-4" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal tạo bài viết -->
<div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPostModalLabel">Tạo bài viết mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeModal('createPostModal')"></button>
            </div>
            <form id="createPostForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="postTitle" class="form-label">Tiêu đề</label>
                        <input type="text" class="form-control" id="postTitle" name="Title" placeholder="Nhập tiêu đề bài viết...">
                    </div>
                    <div class="mb-3">
                        <label for="postContent" class="form-label">Nội dung</label>
                        <textarea class="form-control" id="postContent" name="Content" rows="5" placeholder="Bạn đang nghĩ gì?"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="postTags" class="form-label">Tags (phân cách bằng dấu phẩy)</label>
                        <input type="text" class="form-control" id="postTags" name="Tags" placeholder="tag1, tag2, tag3">
                    </div>
                    <div class="mb-3">
                        <label for="postImages" class="form-label">Hình ảnh (URLs, phân cách bằng dấu phẩy)</label>
                        <input type="text" class="form-control" id="postImages" name="Images" placeholder="https://example.com/image1.jpg, https://example.com/image2.jpg">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Đăng bài</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal chỉnh sửa bài viết -->
<div class="modal fade" id="editPostModal" tabindex="-1" aria-labelledby="editPostModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editPostModalLabel">Chỉnh sửa bài viết</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeModal('editPostModal')"></button>
            </div>
            <form id="editPostForm">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editPostId" name="Id">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editPostTitle" class="form-label">Tiêu đề</label>
                        <input type="text" class="form-control" id="editPostTitle" name="Title" placeholder="Nhập tiêu đề bài viết...">
                    </div>
                    <div class="mb-3">
                        <label for="editPostContent" class="form-label">Nội dung</label>
                        <textarea class="form-control" id="editPostContent" name="Content" rows="5" placeholder="Bạn đang nghĩ gì?"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editPostTags" class="form-label">Tags (phân cách bằng dấu phẩy)</label>
                        <input type="text" class="form-control" id="editPostTags" name="Tags" placeholder="tag1, tag2, tag3">
                    </div>
                    <div class="mb-3">
                        <label for="editPostImages" class="form-label">Hình ảnh (URLs, phân cách bằng dấu phẩy)</label>
                        <input type="text" class="form-control" id="editPostImages" name="Images" placeholder="https://example.com/image1.jpg, https://example.com/image2.jpg">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Cập nhật</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal hiển thị hình ảnh -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content bg-transparent border-0">
            <div class="modal-header border-0 bg-transparent">
                <button type="button" class="btn-close btn-close-white" onclick="closeImageModal()" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center p-0">
                <img id="modalImage" src="" alt="Post image" class="img-fluid" style="max-height: 90vh; max-width: 100%; object-fit: contain;">
            </div>
        </div>
    </div>
</div>

<!-- Modal bình luận -->
<div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="commentModalLabel">Bình luận bài viết</h5>
                <button type="button" class="btn-close" onclick="closeModal('commentModal')" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="commentModalContent">
                    <!-- Comments and form will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f0f2f5;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .card {
        border-radius: 8px;
        border: none;
        background-color: white;
    }

    .post-content {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.5;
    }

    .post-content.expanded {
        display: block;
        -webkit-line-clamp: unset;
    }

    .show-more-link {
        color: #1877f2;
        font-size: 0.9rem;
        cursor: pointer;
        text-decoration: none;
        font-weight: 500;
    }

    .show-more-link:hover {
        text-decoration: underline;
    }

    .btn-light {
        background-color: #f0f2f5;
        border: none;
        border-radius: 20px;
        padding: 10px 15px;
    }

    .btn-light:hover {
        background-color: #e4e6eb;
    }

    .text-muted {
        color: #65676b !important;
    }

    .fw-bold {
        font-weight: 600 !important;
    }

    .modal-content {
        border-radius: 12px;
        border: none;
    }

    .modal-header {
        border-bottom: 1px solid #e4e6eb;
        padding: 20px 24px;
    }

    .modal-body {
        padding: 24px;
    }

    .modal-footer {
        border-top: 1px solid #e4e6eb;
        padding: 20px 24px;
    }

    /* Style cho modal hình ảnh */
    #imageModal .modal-content {
        background: transparent;
        box-shadow: none;
    }

    #imageModal .modal-header {
        position: absolute;
        top: 0;
        right: 0;
        z-index: 1060;
        background: transparent;
        border: none;
    }

    #imageModal .btn-close-white {
        filter: invert(1) grayscale(100%) brightness(200%);
        background-size: 1.5em;
        width: 1.5em;
        height: 1.5em;
    }

    #imageModal .modal-body {
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 80vh;
    }

    /* Style cho ảnh trong bài viết có thể click */
    .clickable-image {
        cursor: pointer;
        transition: opacity 0.2s;
    }

    .clickable-image:hover {
        opacity: 0.8;
    }
</style>

<script>
    let page = 1;
    let isLoading = false;
    const pageSize = 5;

    // Infinite scroll
    window.addEventListener('scroll', () => {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
            if (!isLoading) {
                loadMorePosts();
            }
        }
    });

    function loadMorePosts() {
        isLoading = true;
        document.getElementById("loading").style.display = "block";

        fetch(`?handler=MorePosts&page=${++page}&pageSize=${pageSize}`)
            .then(res => res.text())
            .then(html => {
                if (html.trim() !== "") {
                    document.getElementById("post-container").insertAdjacentHTML('beforeend', html);
                    // Re-initialize các function cho các bài post mới
                    initializeNewPosts();
                }
                document.getElementById("loading").style.display = "none";
                isLoading = false;
            })
            .catch(() => {
                document.getElementById("loading").style.display = "none";
                isLoading = false;
            });
    }

    function initializeNewPosts() {
        // Tìm tất cả các bài post mới được thêm vào
        const newPosts = document.querySelectorAll('[id^="post-"]');
        newPosts.forEach(post => {
            const postId = post.id.replace('post-', '');
            
            // Kiểm tra xem post này đã được khởi tạo chưa
            if (!post.hasAttribute('data-initialized')) {
                // Khởi tạo các function cho post mới
                initializePostFunctions(postId);
                post.setAttribute('data-initialized', 'true');
            }
        });
    }

    function initializePostFunctions(postId) {
        // Khởi tạo nút "Hiển thị thêm" cho post mới
        const content = document.getElementById(`content-${postId}`);
        const showMoreLink = document.getElementById(`showmore-${postId}`);
        
        if (content && showMoreLink) {
            // Thêm event listener cho nút "Hiển thị thêm"
            showMoreLink.addEventListener('click', function() {
                toggleContent(postId);
            });
        }

        // Khởi tạo menu 3 chấm cho post mới
        const postMenuBtn = document.querySelector(`#post-${postId} .post-menu-btn`);
        if (postMenuBtn) {
            postMenuBtn.onclick = function() {
                togglePostMenu(postId);
            };
        }
    }

    function toggleContent(postId) {
        const content = document.getElementById("content-" + postId);
        const btn = document.getElementById("showmore-" + postId);

        if (content.classList.contains("expanded")) {
            content.classList.remove("expanded");
            btn.innerText = "Hiển thị thêm";
        } else {
            content.classList.add("expanded");
            btn.innerText = "Thu gọn";
        }
    }

    // Modal functions
    function openCreateModal() {
        document.getElementById('createPostModal').classList.add('show');
        document.getElementById('createPostModal').style.display = 'block';
        document.body.classList.add('modal-open');
        addBackdrop();
    }

    function openEditModal(postId, title, content, tags, images) {
        document.getElementById('editPostId').value = postId;
        document.getElementById('editPostTitle').value = title || '';
        document.getElementById('editPostContent').value = content || '';
        document.getElementById('editPostTags').value = tags || '';
        document.getElementById('editPostImages').value = images || '';

        document.getElementById('editPostModal').classList.add('show');
        document.getElementById('editPostModal').style.display = 'block';
        document.body.classList.add('modal-open');
        addBackdrop();
    }

    function openImageModal(imageSrc) {
        document.getElementById('modalImage').src = imageSrc;
        document.getElementById('imageModal').classList.add('show');
        document.getElementById('imageModal').style.display = 'block';
        document.body.classList.add('modal-open');
        addBackdrop();
    }

    function openCommentModal(postId) {
        document.getElementById('commentModal').classList.add('show');
        document.getElementById('commentModal').style.display = 'block';
        document.body.classList.add('modal-open');
        addBackdrop();

        fetch(`?handler=GetComments&postId=${postId}`)
            .then(res => res.text())
            .then(html => {
                document.getElementById('commentModalContent').innerHTML = html;
                const form = document.getElementById('commentForm');
                if (form) {
                    form.onsubmit = function (e) {
                        e.preventDefault();
                        submitComment(postId, form);
                    };
                }
            });
    }

    function submitComment(postId, form) {
        const content = form.Content.value.trim();
        if (!content) return;

        fetch(`?handler=AddComment`, {
                method: "POST",
                headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('#commentForm input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify({ PostId: postId, Content: content })
            })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                openCommentModal(postId); // Reload comments
            } else {
                alert("Bình luận thất bại: " + (data.message || "Vui lòng thử lại."));
            }
        });
    }

    function closeImageModal() {
        closeModal('imageModal');
    }

    function addBackdrop() {
        if (!document.querySelector('.modal-backdrop')) {
            const backdrop = document.createElement('div');
            backdrop.className = 'modal-backdrop fade show';
            document.body.appendChild(backdrop);
        }
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (!modal) return;
        modal.classList.remove('show');
        modal.style.display = 'none';
        document.body.classList.remove('modal-open');
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();
    }

    // Form submit handlers
    document.getElementById('createPostForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            Title: document.getElementById('postTitle').value,
            Content: document.getElementById('postContent').value,
            TagsString: document.getElementById('postTags').value,
            ImagesString: document.getElementById('postImages').value
        };

        fetch('?handler=Create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reload trang để hiển thị bài viết mới
                location.reload();
            } else {
                alert('Tạo bài viết thất bại: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi tạo bài viết');
        });
    });

    document.getElementById('editPostForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            PostId: document.getElementById('editPostId').value,
            Title: document.getElementById('editPostTitle').value,
            Content: document.getElementById('editPostContent').value,
            TagsString: document.getElementById('editPostTags').value,
            ImagesString: document.getElementById('editPostImages').value
        };

        fetch('?handler=Update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Debug: Log data nhận được
                console.log('Update response data:', data);
                console.log('Images count:', data.post.images ? data.post.images.length : 0);
                console.log('Images:', data.post.images);
                
                // Cập nhật UI với dữ liệu mới
                updatePostInUI(data.post);
                closeModal('editPostModal');
            } else {
                alert('Cập nhật bài viết thất bại: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi cập nhật bài viết');
        });
    });

    function updatePostInUI(updatedPost) {
        const postElement = document.getElementById(`post-${updatedPost.id}`);
        if (postElement) {
            // Cập nhật tiêu đề
            const titleElement = postElement.querySelector('h6');
            if (titleElement && updatedPost.title) {
                titleElement.textContent = updatedPost.title;
            }

            // Cập nhật nội dung
            const contentElement = postElement.querySelector(`#content-${updatedPost.id}`);
            if (contentElement) {
                contentElement.textContent = updatedPost.content;
            }

            // Cập nhật tags
            const tagsContainer = postElement.querySelector('.px-3.pb-2:last-of-type');
            if (tagsContainer && updatedPost.tags && updatedPost.tags.length > 0) {
                tagsContainer.innerHTML = '';
                updatedPost.tags.forEach(tag => {
                    const tagSpan = document.createElement('span');
                    tagSpan.className = 'badge bg-light text-primary me-1';
                    tagSpan.textContent = `#${tag}`;
                    tagsContainer.appendChild(tagSpan);
                });
            }

            // Cập nhật hình ảnh nếu có
            if (updatedPost.images && updatedPost.images.length > 0) {
                // Debug: Log thông tin update
                console.log('Updating images for post:', updatedPost.id);
                console.log('Images to update:', updatedPost.images);
                
                // Tìm container hình ảnh chính xác hơn
                const imagesContainer = postElement.querySelector('.px-3.pb-2:has(img)') || 
                                      postElement.querySelector('.px-3.pb-2:has(.row)') ||
                                      postElement.querySelector('.px-3.pb-2:nth-last-child(3)');
                
                console.log('Found images container:', imagesContainer);
                
                if (imagesContainer) {
                    // Xóa hình ảnh cũ
                    imagesContainer.innerHTML = '';
                    console.log('Cleared old images, adding new ones...');
                    
                    // Thêm hình ảnh mới theo logic hiển thị
                    if (updatedPost.images.length === 1) {
                        console.log('Adding single image:', updatedPost.images[0]);
                        // 1 ảnh: hiển thị full width
                        const img = document.createElement('img');
                        img.src = updatedPost.images[0];
                        img.alt = 'Post image';
                        img.className = 'img-fluid rounded clickable-image';
                        img.style.maxHeight = '400px';
                        img.style.width = '100%';
                        img.style.objectFit = 'cover';
                        img.onclick = function() { openImageModal(updatedPost.images[0]); };
                        imagesContainer.appendChild(img);
                    } else if (updatedPost.images.length === 2) {
                        console.log('Adding 2 images');
                        // 2 ảnh: hiển thị 2 cột bằng nhau
                        const row = document.createElement('div');
                        row.className = 'row g-1';
                        
                        updatedPost.images.forEach(imageUrl => {
                            const col = document.createElement('div');
                            col.className = 'col-6';
                            
                            const img = document.createElement('img');
                            img.src = imageUrl;
                            img.alt = 'Post image';
                            img.className = 'img-fluid rounded clickable-image';
                            img.style.height = '200px';
                            img.style.width = '100%';
                            img.style.objectFit = 'cover';
                            img.onclick = function() { openImageModal(imageUrl); };
                            
                            col.appendChild(img);
                            row.appendChild(col);
                        });
                        
                        imagesContainer.appendChild(row);
                    } else {
                        console.log('Adding multiple images:', updatedPost.images.length);
                        // Nhiều ảnh: ảnh đầu tiên lớn, 2 ảnh nhỏ bên phải
                        const row = document.createElement('div');
                        row.className = 'row g-1';
                        
                        // Ảnh đầu tiên (chiếm 8 cột)
                        const col8 = document.createElement('div');
                        col8.className = 'col-8';
                        const img1 = document.createElement('img');
                        img1.src = updatedPost.images[0];
                        img1.alt = 'Post image';
                        img1.className = 'img-fluid rounded clickable-image';
                        img1.style.height = '200px';
                        img1.style.width = '100%';
                        img1.style.objectFit = 'cover';
                        img1.onclick = function() { openImageModal(updatedPost.images[0]); };
                        col8.appendChild(img1);
                        row.appendChild(col8);
                        
                        // Cột phải (4 cột) chứa 2 ảnh nhỏ
                        const col4 = document.createElement('div');
                        col4.className = 'col-4';
                        const col4Container = document.createElement('div');
                        col4Container.className = 'd-flex flex-column g-1';
                        
                        // Ảnh thứ 2
                        const img2 = document.createElement('img');
                        img2.src = updatedPost.images[1];
                        img2.alt = 'Post image';
                        img2.className = 'img-fluid rounded clickable-image mb-1';
                        img2.style.height = '98px';
                        img2.style.width = '100%';
                        img2.style.objectFit = 'cover';
                        img2.onclick = function() { openImageModal(updatedPost.images[1]); };
                        col4Container.appendChild(img2);
                        
                        // Ảnh thứ 3 (nếu có)
                        if (updatedPost.images.length > 2) {
                            const img3Container = document.createElement('div');
                            img3Container.className = 'position-relative';
                            
                            const img3 = document.createElement('img');
                            img3.src = updatedPost.images[2];
                            img3.alt = 'Post image';
                            img3.className = 'img-fluid rounded clickable-image';
                            img3.style.height = '98px';
                            img3.style.width = '100%';
                            img3.style.objectFit = 'cover';
                            img3.onclick = function() { openImageModal(updatedPost.images[2]); };
                            img3Container.appendChild(img3);
                            
                            // Hiển thị số ảnh còn lại nếu có nhiều hơn 3 ảnh
                            if (updatedPost.images.length > 3) {
                                const overlay = document.createElement('div');
                                overlay.className = 'position-absolute top-0 start-0 w-100 h-100 bg-dark bg-opacity-50 rounded d-flex align-items-center justify-content-center';
                                const overlayText = document.createElement('span');
                                overlayText.className = 'text-white fw-bold';
                                overlayText.textContent = `+${updatedPost.images.length - 3}`;
                                overlay.appendChild(overlayText);
                                img3Container.appendChild(overlay);
                            }
                            
                            col4Container.appendChild(img3Container);
                        }
                        
                        col4.appendChild(col4Container);
                        row.appendChild(col4);
                        imagesContainer.appendChild(row);
                    }
                } else {
                    console.error('Could not find images container for post:', updatedPost.id);
                }
            }
        }
    }

    // Khởi tạo các function cho các bài post ban đầu
    document.addEventListener('DOMContentLoaded', function() {
        const initialPosts = document.querySelectorAll('[id^="post-"]');
        initialPosts.forEach(post => {
            const postId = post.id.replace('post-', '');
            initializePostFunctions(postId);
            post.setAttribute('data-initialized', 'true');
        });
    });

    // Function xử lý menu 3 chấm
    function togglePostMenu(postId) {
        closeAllPostMenus();
        const menu = document.getElementById('menu-' + postId);
        if (menu) { 
            menu.classList.toggle('show'); 
        }
    }

    function closeAllPostMenus() {
        document.querySelectorAll('.post-menu').forEach(m => m.classList.remove('show'));
    }

    // Function xóa post
    function deletePost(postId) {
        if (confirm("Bạn có chắc chắn muốn xóa bài viết này?")) {
            fetch(`?handler=Delete&id=${postId}`, { 
                method: "POST",
                headers: { 
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`post-${postId}`).remove();
                } else {
                    alert("Xóa thất bại: " + (data.message || "Vui lòng thử lại."));
                }
            })
            .catch(() => alert("Có lỗi xảy ra. Vui lòng thử lại."));
        }
    }

    function deleteComment(commentId) {
    if (!confirm("Are you sure to delete this comment?")) return;
    fetch(`?handler=DeleteComment`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify({ commentId: commentId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById(`comment-${commentId}`).remove();
        } else {
            alert("Delete fail.");
        }
    });
}

    // Close tất cả menu khi click bên ngoài
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.post-menu') && !e.target.closest('.post-menu-btn')) {
            closeAllPostMenus();
        }
    });

    // Close modal khi nhấn ESC
    window.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (document.getElementById('editPostModal').classList.contains('show')) closeModal('editPostModal');
            if (document.getElementById('createPostModal').classList.contains('show')) closeModal('createPostModal');
            if (document.getElementById('imageModal').classList.contains('show')) closeModal('imageModal');
            if (document.getElementById('commentModal').classList.contains('show')) closeModal('commentModal');
        }
    });

    // Close modal khi click bên ngoài
    window.addEventListener('click', function(e) {
        const createM = document.getElementById('createPostModal');
        const editM = document.getElementById('editPostModal');
        const imageM = document.getElementById('imageModal');
        const commentM = document.getElementById('commentModal');
        if (e.target === createM) closeModal('createPostModal');
        if (e.target === editM) closeModal('editPostModal');
        if (e.target === imageM) closeModal('imageModal');
        if (e.target === commentM) closeModal('commentModal');
    });
</script>

<script>
    function toggleCommentMenu(commentId) {
        closeAllCommentMenus();
        const menu = document.getElementById('comment-menu-' + commentId);
        if (menu) { menu.classList.toggle('show'); }
    }
    function closeAllCommentMenus() {
        document.querySelectorAll('.comment-menu').forEach(m => m.classList.remove('show'));
    }
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.comment-menu') && !e.target.closest('.comment-menu-btn')) {
            closeAllCommentMenus();
        }
    });
</script>
